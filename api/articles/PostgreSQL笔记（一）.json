{"title":"PostgreSQL笔记（一）","slug":"PostgreSQL笔记（一）","date":"2020-09-04T10:14:52.482Z","updated":"2020-09-05T01:30:22.623Z","comments":true,"excerpt":"","content":"<h1 id=\"PostgreSQL源码阅读（一）：体系结构\"><a href=\"#PostgreSQL源码阅读（一）：体系结构\" class=\"headerlink\" title=\"PostgreSQL源码阅读（一）：体系结构\"></a>PostgreSQL源码阅读（一）：体系结构</h1><h2 id=\"前\"><a href=\"#前\" class=\"headerlink\" title=\"前\"></a>前</h2><p>​    之前学过一次PostgreSQL，但是当时很多东西都只是看了大概，其中的设计和技巧并没有留下印象，很可惜。这次重新来学习一次，希望能有所收获。</p>\n<p>​    阅读的源码版本为12.4，主要按照《PostgreSQL数据库内核分析》来阅读，由于版本不同，所以会有部分差异，还望周知。</p>\n<h2 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h2><p>​    PostgreSQL主要目录及（src/backend）用途如下：</p>\n\n    <pre><code class=\"lang-bash\">.\n├── access            <span class=\"hljs-regexp\">//</span> 提供各种存取方法，支持堆、索引\n├── bootstrap        <span class=\"hljs-regexp\">//</span> 初始化数据库模板\n├── catalog            <span class=\"hljs-regexp\">//</span> 系统表操作\n├── commands        <span class=\"hljs-regexp\">//</span> 执行非查询SQL目录\n├── executor        <span class=\"hljs-regexp\">//</span> 执行器\n├── foreign            <span class=\"hljs-regexp\">//</span> support <span class=\"hljs-keyword\">for</span> foreign-data wrappers, servers and user mappings\n├── jit\n├── lib                <span class=\"hljs-regexp\">//</span> 通用数据结构，包括二叉堆、hash表、链表等\n├── libpq            <span class=\"hljs-regexp\">//</span> 处理客户端间的通信\n├── main            <span class=\"hljs-regexp\">//</span> 主程序模块，负责将控制权转到Postmaster进程或Postgres进程\n├── nodes            <span class=\"hljs-regexp\">//</span> 定义系统内部所有的节点、链表等结构\n├── optimizer        <span class=\"hljs-regexp\">//</span> optimizer\n├── parser            <span class=\"hljs-regexp\">//</span> paser\n├── partitioning\n├── po                <span class=\"hljs-regexp\">//</span> 认不得，应该是和语言相关\n├── port            <span class=\"hljs-regexp\">//</span> 平台兼容性\n├── postmaster\n├── regex            <span class=\"hljs-regexp\">//</span> 正则表达式处理\n├── replication\n├── rewrite            <span class=\"hljs-regexp\">//</span> 查询重写\n├── snowball        <span class=\"hljs-regexp\">//</span> 第三方，处理语言信息检索\n├── statistics\n├── storage            <span class=\"hljs-regexp\">//</span> 管理所有存储系统\n├── tcop            <span class=\"hljs-regexp\">//</span> Postgres服务进程的主要处理部分，包括编译、优化、执行等\n├── tsearch            <span class=\"hljs-regexp\">//</span> 全文检索\n└── utils            <span class=\"hljs-regexp\">//</span> 错误报告、初始化操作</code></pre>\n<h2 id=\"系统表\"><a href=\"#系统表\" class=\"headerlink\" title=\"系统表\"></a>系统表</h2><p>​    在关系型数据库中，描述数据库系统中的各种关系是十分必要的，比如表与对象间的关系。PostgreSQL中使用系统表来描述这样的关系。</p>\n<p>​    系统表满足PostgreSQL中所有表的性质，包括增删查改。所有的系统表均存于src/include/catalog中以pg_xxx.h文件中。</p>\n<p>​    系统表如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">系统表名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">pg_namespace</td>\n<td>PostgreSQL的命名空间</td>\n</tr>\n<tr>\n<td align=\"left\">pg_tablespace</td>\n<td>表空间信息</td>\n</tr>\n<tr>\n<td align=\"left\">pg_database</td>\n<td>当前数据库中的信息</td>\n</tr>\n<tr>\n<td align=\"left\">pg_class</td>\n<td>表结构的数据库对象信息</td>\n</tr>\n<tr>\n<td align=\"left\">pg_type</td>\n<td>数据类型信息</td>\n</tr>\n<tr>\n<td align=\"left\">pg_attribute</td>\n<td>表的属性信息</td>\n</tr>\n<tr>\n<td align=\"left\">pg_index</td>\n<td>索引的具体信息</td>\n</tr>\n</tbody></table>\n<p>​    挑两个不是很懂的表说一下，其它的比较直观，就忽略了。</p>\n<h3 id=\"pg-namespace\"><a href=\"#pg-namespace\" class=\"headerlink\" title=\"pg_namespace\"></a>pg_namespace</h3><p>​    PostgreSQL中按照命名空间查找对象</p>\n<h3 id=\"pg-tablespace\"><a href=\"#pg-tablespace\" class=\"headerlink\" title=\"pg_tablespace\"></a>pg_tablespace</h3><p>​    一个数据集簇中的所有数据库共享一个pg_tablespace，用于控制磁盘布局。</p>\n<h2 id=\"数据库集簇\"><a href=\"#数据库集簇\" class=\"headerlink\" title=\"数据库集簇\"></a>数据库集簇</h2><p>​    数据库集簇，即数据存储区（就是使用initdb初始化的文件）。PostgreSQL利用OID（unsigned int）来唯一标识数据库对象。</p>\n<h2 id=\"Postmaster\"><a href=\"#Postmaster\" class=\"headerlink\" title=\"Postmaster\"></a>Postmaster</h2><p>​    Postmaster是PostgreSQL服务器上常驻的总控制系统，除了接受连接请求时会fork出一个新的Postgres进程，还负责系统开关、错误恢复。</p>\n<p>​    主要流程为：</p>\n<ul>\n<li>初始化内存上下文</li>\n<li>注册信号处理函数</li>\n<li>初始化GUC参数</li>\n<li>解析命令行参数</li>\n<li>设置连接环境</li>\n<li>创建套接字</li>\n<li>循环等待</li>\n</ul>\n<h3 id=\"初始化内存上下文\"><a href=\"#初始化内存上下文\" class=\"headerlink\" title=\"初始化内存上下文\"></a>初始化内存上下文</h3><p>​    PostgreSQL单独实现了内存管理机制，即使用所谓的“内存上下文”来管理内存分配，以避免内存泄漏。</p>\n<p>​    调用MemoryContextInit(void)函数来完成初始化，函数位于src/backend/utils/mmgr/mcxt.c下。</p>\n<p>​    初始化了TopMemoryContext和ErrorContext。TopMemoryContext是所有内存分配上下文的根结点，所有上下文、内存都是该结点的子结点。</p>\n<h3 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h3><p>​    还有很多其它的部分，但是不是很关键，而且我们的目标是分析源码，那么这一章就到此结束。</p>\n","categories":[],"tags":[{"name":"Database, PostgreSQL","path":"api/tags/Database, PostgreSQL.json"}]}